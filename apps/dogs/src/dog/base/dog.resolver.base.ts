/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Dog } from "./Dog";
import { DogCountArgs } from "./DogCountArgs";
import { DogFindManyArgs } from "./DogFindManyArgs";
import { DogFindUniqueArgs } from "./DogFindUniqueArgs";
import { CreateDogArgs } from "./CreateDogArgs";
import { UpdateDogArgs } from "./UpdateDogArgs";
import { DeleteDogArgs } from "./DeleteDogArgs";
import { DogService } from "../dog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Dog)
export class DogResolverBase {
  constructor(
    protected readonly service: DogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Dog",
    action: "read",
    possession: "any",
  })
  async _dogsMeta(
    @graphql.Args() args: DogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Dog])
  @nestAccessControl.UseRoles({
    resource: "Dog",
    action: "read",
    possession: "any",
  })
  async dogs(@graphql.Args() args: DogFindManyArgs): Promise<Dog[]> {
    return this.service.dogs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Dog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Dog",
    action: "read",
    possession: "own",
  })
  async dog(@graphql.Args() args: DogFindUniqueArgs): Promise<Dog | null> {
    const result = await this.service.dog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dog)
  @nestAccessControl.UseRoles({
    resource: "Dog",
    action: "create",
    possession: "any",
  })
  async createDog(@graphql.Args() args: CreateDogArgs): Promise<Dog> {
    return await this.service.createDog({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dog)
  @nestAccessControl.UseRoles({
    resource: "Dog",
    action: "update",
    possession: "any",
  })
  async updateDog(@graphql.Args() args: UpdateDogArgs): Promise<Dog | null> {
    try {
      return await this.service.updateDog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dog)
  @nestAccessControl.UseRoles({
    resource: "Dog",
    action: "delete",
    possession: "any",
  })
  async deleteDog(@graphql.Args() args: DeleteDogArgs): Promise<Dog | null> {
    try {
      return await this.service.deleteDog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
