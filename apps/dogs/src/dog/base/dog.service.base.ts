/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dog as PrismaDog } from "@prisma/client";

export class DogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DogCountArgs, "select">): Promise<number> {
    return this.prisma.dog.count(args);
  }

  async dogs<T extends Prisma.DogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DogFindManyArgs>
  ): Promise<PrismaDog[]> {
    return this.prisma.dog.findMany<Prisma.DogFindManyArgs>(args);
  }
  async dog<T extends Prisma.DogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DogFindUniqueArgs>
  ): Promise<PrismaDog | null> {
    return this.prisma.dog.findUnique(args);
  }
  async createDog<T extends Prisma.DogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DogCreateArgs>
  ): Promise<PrismaDog> {
    return this.prisma.dog.create<T>(args);
  }
  async updateDog<T extends Prisma.DogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DogUpdateArgs>
  ): Promise<PrismaDog> {
    return this.prisma.dog.update<T>(args);
  }
  async deleteDog<T extends Prisma.DogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DogDeleteArgs>
  ): Promise<PrismaDog> {
    return this.prisma.dog.delete(args);
  }
}
